name: Client Build and Test

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'client/**'
      - '.github/workflows/client-build.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'client/**'
      - '.github/workflows/client-build.yml'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./client
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: client/package-lock.json
    
    - name: Install dependencies
      run: npm ci

    - name: Install Playwright CTRF reporter
      run: npm install --save-dev playwright-ctrf-json-reporter
    
    - name: Create .env file for tests
      run: |
        echo "REACT_APP_AZDEVOPS_ORGANIZATION=test-org" > .env
    
    - name: Lint code
      run: npm run lint
      continue-on-error: true
    
    - name: Run tests
      run: npm test -- --coverage --watchAll=false --testPathIgnorePatterns=/node_modules/ --transformIgnorePatterns="node_modules/(?!(axios)/)"
      env:
        CI: true
        NODE_OPTIONS: --experimental-vm-modules
    
    - name: Generate coverage summary
      run: |
        echo "## 📊 Test Coverage Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Coverage report generated successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Display test results summary
        if [ -f coverage/lcov.info ]; then
          echo "✅ **Coverage files generated:**" >> $GITHUB_STEP_SUMMARY
          echo "- HTML Report: \`coverage/lcov-report/index.html\`" >> $GITHUB_STEP_SUMMARY
          echo "- LCOV Report: \`coverage/lcov.info\`" >> $GITHUB_STEP_SUMMARY
          echo "- Cobertura Report: \`coverage/cobertura-coverage.xml\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Try to extract some basic coverage info
          echo "📈 **Quick Coverage Stats:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          grep -A 10 "All files" coverage/lcov-report/index.html | grep -o '[0-9]*\.[0-9]*%' | head -4 | awk 'NR==1{print "Statements: " $1} NR==2{print "Branches:   " $1} NR==3{print "Functions:  " $1} NR==4{print "Lines:      " $1}' >> $GITHUB_STEP_SUMMARY || echo "Coverage stats extraction failed" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Coverage report not found" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📁 **Full coverage report available in build artifacts**" >> $GITHUB_STEP_SUMMARY
    
    - name: Build application
      run: npm run build
      env:
        # Set any required environment variables for build
        REACT_APP_AZDEVOPS_ORGANIZATION: "placeholder"
        REACT_APP_API_URL: "placeholder"

    - name: Install Playwright browsers
      run: npx playwright install --with-deps

    - name: Run Playwright smoke tests
      run: npm run test:e2e:smoke
      env:
        CI: true

    - name: Upload Playwright test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-test-results
        path: |
          client/playwright-report/
          client/test-results/
        retention-days: 30

    - name: Upload CTRF report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ctrf-report
        path: ctrf/ctrf-report.json
        retention-days: 30

    - name: Publish Test Summary Results
      run: npx github-actions-ctrf ctrf/ctrf-report.json

    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: client-test-results
        path: |
          client/coverage/
          client/test-results.xml
        retention-days: 30
    
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: client-build
        path: client/build/
        retention-days: 7
    
    - name: Check bundle size
      run: |
        echo "Build size information:"
        du -sh build/
        du -sh build/static/js/*.js | head -10
        echo "Largest files:"
        find build/ -type f -name "*.js" -o -name "*.css" | xargs ls -lah | sort -k5 -hr | head -10
