name: Deploy to Azure

on:
  push:
    branches: [ main, feature/deploy ]
    paths:
      - 'client/**'
      - 'infra/**'
      - '.github/workflows/deploy-azure.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'prod'
        type: choice
        options:
        - prod
        - staging

permissions:
  id-token: write
  contents: read

env:
  AZURE_LOCATION: eastus

jobs:
  # Build the client application
  build:
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./client
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: client/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Create .env file for build
      run: |
        echo "REACT_APP_AZDEVOPS_ORGANIZATION=${{ secrets.REACT_APP_AZDEVOPS_ORGANIZATION }}" > .env
        echo "REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }}" >> .env
    
    - name: Build application
      run: npm run build
      env:
        REACT_APP_AZDEVOPS_ORGANIZATION: ${{ secrets.REACT_APP_AZDEVOPS_ORGANIZATION }}
        REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL }}
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: client-build
        path: client/build/
        retention-days: 1

  # Deploy infrastructure and application
  deploy:
    needs: build
    runs-on: ubuntu-latest
    # environment: ${{ github.event.inputs.environment || 'prod' }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: client-build
        path: client/build/
    
    - name: Azure Login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Deploy Infrastructure
      id: deploy-infra
      run: |
        # Deploy Infrastructure using Azure REST API (avoids Azure CLI stream consumption issues)
        SUBSCRIPTION_ID="${{ secrets.AZURE_SUBSCRIPTION_ID }}"
        DEPLOYMENT_NAME="azdevops-dashboard-${{ github.run_number }}"
        LOCATION="${{ env.AZURE_LOCATION }}"
        
        echo "Starting deployment via Azure REST API..."
        echo "Subscription: $SUBSCRIPTION_ID"
        echo "Deployment: $DEPLOYMENT_NAME"
        echo "Location: $LOCATION"
        
        # Get access token
        ACCESS_TOKEN=$(az account get-access-token --query accessToken -o tsv)
        
        # Build Bicep template to ARM JSON
        echo "Converting Bicep to ARM template..."
        az bicep build --file infra/main.bicep --outfile main.json
        
        # Create deployment JSON payload using jq to properly embed the template
        echo "Creating deployment payload..."
        TEMPLATE_JSON=$(cat main.json)
        
        # Use jq to create the deployment payload with proper JSON escaping
        jq -n \
          --arg location "$LOCATION" \
          --argjson template "$TEMPLATE_JSON" \
          --arg repoUrl "https://github.com/${{ github.repository }}" \
          --arg repoToken "${{ secrets.GITHUB_TOKEN }}" \
          '{
            "location": $location,
            "properties": {
              "template": $template,
              "parameters": {
                "environment": {
                  "value": "prod"
                },
                "location": {
                  "value": $location
                },
                "repositoryUrl": {
                  "value": $repoUrl
                },
                "repositoryToken": {
                  "value": $repoToken
                }
              },
              "mode": "Incremental"
            }
          }' > deployment.json
        
        # Start deployment using REST API
        DEPLOYMENT_URL="https://management.azure.com/subscriptions/$SUBSCRIPTION_ID/providers/Microsoft.Resources/deployments/$DEPLOYMENT_NAME?api-version=2021-04-01"
        
        echo "Creating deployment..."
        RESPONSE=$(curl -s -w "%{http_code}" -X PUT \
          -H "Authorization: Bearer $ACCESS_TOKEN" \
          -H "Content-Type: application/json" \
          -d @deployment.json \
          "$DEPLOYMENT_URL")
        
        HTTP_CODE=$(echo "$RESPONSE" | tail -c 4)
        RESPONSE_BODY=$(echo "$RESPONSE" | head -c -4)
        
        echo "HTTP Response Code: $HTTP_CODE"
        
        if [ "$HTTP_CODE" != "201" ] && [ "$HTTP_CODE" != "200" ]; then
          echo "❌ Failed to create deployment. Response:"
          echo "$RESPONSE_BODY" | jq .
          exit 1
        fi
        
        echo "✅ Deployment initiated successfully"
        
        # Wait for deployment to complete
        echo "Waiting for deployment to complete..."
        for i in {1..60}; do
          DEPLOYMENT_STATUS=$(curl -s -H "Authorization: Bearer $ACCESS_TOKEN" "$DEPLOYMENT_URL" | jq -r '.properties.provisioningState // "Unknown"')
          echo "[$i/60] Deployment status: $DEPLOYMENT_STATUS"
          
          if [ "$DEPLOYMENT_STATUS" = "Succeeded" ]; then
            echo "🎉 Deployment completed successfully!"
            # Get outputs
            OUTPUTS=$(curl -s -H "Authorization: Bearer $ACCESS_TOKEN" "$DEPLOYMENT_URL" | jq -r '.properties.outputs')
            echo "staticWebAppUrl=$(echo "$OUTPUTS" | jq -r '.staticWebAppUrl.value // ""')" >> $GITHUB_OUTPUT
            echo "staticWebAppName=$(echo "$OUTPUTS" | jq -r '.staticWebAppName.value // ""')" >> $GITHUB_OUTPUT
            echo "staticWebAppToken=$(echo "$OUTPUTS" | jq -r '.staticWebAppToken.value // ""')" >> $GITHUB_OUTPUT
            echo "resourceGroupName=$(echo "$OUTPUTS" | jq -r '.resourceGroupName.value // ""')" >> $GITHUB_OUTPUT
            echo "deployment_status=success" >> $GITHUB_OUTPUT
            break
          elif [ "$DEPLOYMENT_STATUS" = "Failed" ]; then
            echo "❌ Deployment failed!"
            curl -s -H "Authorization: Bearer $ACCESS_TOKEN" "$DEPLOYMENT_URL" | jq '.properties.error'
            echo "deployment_status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          sleep 30
        done
        
        if [ "$DEPLOYMENT_STATUS" != "Succeeded" ]; then
          echo "⏱️ Deployment timed out or failed"
          echo "deployment_status=timeout" >> $GITHUB_OUTPUT
          exit 1
        fi
    
    - name: Process deployment outputs
      id: process-outputs
      run: |
        # Extract outputs from the ARM deployment
        static_web_app_name="${{ steps.deploy-infra.outputs.staticWebAppName }}"
        static_web_app_url="${{ steps.deploy-infra.outputs.staticWebAppUrl }}"
        
        echo "Extracted static web app name: $static_web_app_name"
        echo "Extracted static web app URL: $static_web_app_url"
        
        # Validate outputs
        if [ -z "$static_web_app_name" ] || [ "$static_web_app_name" = "null" ]; then
          echo "❌ ERROR: Static Web App name is empty or null"
          exit 1
        fi
        
        if [ -z "$static_web_app_url" ] || [ "$static_web_app_url" = "null" ]; then
          echo "❌ ERROR: Static Web App URL is empty or null"
          exit 1
        fi
        
        # Set outputs for other steps
        echo "static-web-app-name=$static_web_app_name" >> $GITHUB_OUTPUT
        echo "static-web-app-url=https://$static_web_app_url" >> $GITHUB_OUTPUT
        
        # Create step summary
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** ${{ github.event.inputs.environment || 'prod' }}" >> $GITHUB_STEP_SUMMARY
        echo "**Static Web App:** $static_web_app_name" >> $GITHUB_STEP_SUMMARY
        echo "**URL:** https://$static_web_app_url" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ Infrastructure deployed successfully!" >> $GITHUB_STEP_SUMMARY
    
    - name: Deploy Static Web App
      id: deploy-static-web-app
      uses: Azure/static-web-apps-deploy@v1
      with:
        azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        action: "upload"
        app_location: "/client"
        output_location: "build"
        skip_app_build: true
    
    - name: Update deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "## ✅ Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🌐 **Live URL:** ${{ steps.process-outputs.outputs.static-web-app-url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Visit your deployed application" >> $GITHUB_STEP_SUMMARY
          echo "2. Configure any custom domains if needed" >> $GITHUB_STEP_SUMMARY
          echo "3. Set up monitoring and alerts" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ❌ Deployment Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Please check the logs above for error details." >> $GITHUB_STEP_SUMMARY
        fi
    
    outputs:
      static-web-app-url: ${{ steps.process-outputs.outputs.static-web-app-url }}
      static-web-app-name: ${{ steps.process-outputs.outputs.static-web-app-name }}

  # Run smoke tests against the deployed application
  smoke-test:
    needs: deploy
    runs-on: ubuntu-latest
    if: success()
    
    defaults:
      run:
        working-directory: ./client
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: client/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
    
    - name: Run smoke tests against deployed app
      run: npx playwright test smoke.spec.ts
      env:
        BASE_URL: ${{ needs.deploy.outputs.static-web-app-url }}
        CI: true
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: smoke-test-results
        path: |
          client/playwright-report/
          client/test-results/
        retention-days: 30
