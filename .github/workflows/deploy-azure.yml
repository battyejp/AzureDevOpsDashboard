name: Deploy to Azure

on:
  push:
    branches: [ main, feature/deploy ]
    paths:
      - 'client/**'
      - 'infra/**'
      - '.github/workflows/deploy-azure.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'prod'
        type: choice
        options:
        - prod
        - staging

permissions:
  id-token: write
  contents: read

env:
  AZURE_RESOURCE_GROUP: rg-azdevops-dashboard
  AZURE_LOCATION: eastus

jobs:
  # Build the client application
  build:
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./client
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: client/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Create .env file for build
      run: |
        echo "REACT_APP_AZDEVOPS_ORGANIZATION=${{ secrets.REACT_APP_AZDEVOPS_ORGANIZATION }}" > .env
        echo "REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }}" >> .env
    
    - name: Build application
      run: npm run build
      env:
        REACT_APP_AZDEVOPS_ORGANIZATION: ${{ secrets.REACT_APP_AZDEVOPS_ORGANIZATION }}
        REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL }}
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: client-build
        path: client/build/
        retention-days: 1

  # Deploy infrastructure and application
  deploy:
    needs: build
    runs-on: ubuntu-latest
    # environment: ${{ github.event.inputs.environment || 'prod' }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: client-build
        path: client/build/
    
    - name: Azure Login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: Create Resource Group
      run: |
        az group create \
          --name ${{ env.AZURE_RESOURCE_GROUP }} \
          --location ${{ env.AZURE_LOCATION }} \
          --tags Environment=${{ github.event.inputs.environment || 'prod' }} Application=azdevops-dashboard
    
    - name: Deploy Infrastructure
      id: deploy-infra
      uses: azure/arm-deploy@v1
      with:
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
        template: infra/main.bicep
        parameters: |
          environment=${{ github.event.inputs.environment || 'prod' }}
          repositoryUrl=https://github.com/${{ github.repository }}
          repositoryToken=${{ secrets.GITHUB_TOKEN }}
        deploymentName: azdevops-dashboard-${{ github.run_number }}
        scope: resourcegroup
        failOnStdErr: false
    
    - name: Process deployment outputs
      id: process-outputs
      run: |
        # Extract outputs from the ARM deployment
        static_web_app_name="${{ steps.deploy-infra.outputs.staticWebAppName }}"
        static_web_app_url="${{ steps.deploy-infra.outputs.staticWebAppUrl }}"
        
        echo "Extracted static web app name: $static_web_app_name"
        echo "Extracted static web app URL: $static_web_app_url"
        
        # Validate outputs
        if [ -z "$static_web_app_name" ] || [ "$static_web_app_name" = "null" ]; then
          echo "❌ ERROR: Static Web App name is empty or null"
          exit 1
        fi
        
        if [ -z "$static_web_app_url" ] || [ "$static_web_app_url" = "null" ]; then
          echo "❌ ERROR: Static Web App URL is empty or null"
          exit 1
        fi
        
        # Set outputs for other steps
        echo "static-web-app-name=$static_web_app_name" >> $GITHUB_OUTPUT
        echo "static-web-app-url=https://$static_web_app_url" >> $GITHUB_OUTPUT
        
        # Create step summary
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** ${{ github.event.inputs.environment || 'prod' }}" >> $GITHUB_STEP_SUMMARY
        echo "**Static Web App:** $static_web_app_name" >> $GITHUB_STEP_SUMMARY
        echo "**URL:** https://$static_web_app_url" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ Infrastructure deployed successfully!" >> $GITHUB_STEP_SUMMARY
    
    - name: Deploy Static Web App
      id: deploy-static-web-app
      uses: Azure/static-web-apps-deploy@v1
      with:
        azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        action: "upload"
        app_location: "/client"
        output_location: "build"
        skip_app_build: true
    
    - name: Update deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "## ✅ Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🌐 **Live URL:** ${{ steps.process-outputs.outputs.static-web-app-url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Visit your deployed application" >> $GITHUB_STEP_SUMMARY
          echo "2. Configure any custom domains if needed" >> $GITHUB_STEP_SUMMARY
          echo "3. Set up monitoring and alerts" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ❌ Deployment Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Please check the logs above for error details." >> $GITHUB_STEP_SUMMARY
        fi
    
    outputs:
      static-web-app-url: ${{ steps.process-outputs.outputs.static-web-app-url }}
      static-web-app-name: ${{ steps.process-outputs.outputs.static-web-app-name }}

  # Run smoke tests against the deployed application
  smoke-test:
    needs: deploy
    runs-on: ubuntu-latest
    if: success()
    
    defaults:
      run:
        working-directory: ./client
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: client/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
    
    - name: Run smoke tests against deployed app
      run: npx playwright test smoke.spec.ts
      env:
        BASE_URL: ${{ needs.deploy.outputs.static-web-app-url }}
        CI: true
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: smoke-test-results
        path: |
          client/playwright-report/
          client/test-results/
        retention-days: 30
