name: Deploy to Azure

on:
  push:
    branches: [ main, feature/deploy ]
    paths:
      - 'client/**'
      - 'infra/**'
      - '.github/workflows/deploy-azure.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'prod'
        type: choice
        options:
        - prod
        - staging

permissions:
  id-token: write
  contents: read

env:
  AZURE_RESOURCE_GROUP: rg-azdevops-dashboard
  AZURE_LOCATION: eastus

jobs:
  # Build the client application
  build:
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./client
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: client/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Create .env file for build
      run: |
        echo "REACT_APP_AZDEVOPS_ORGANIZATION=${{ secrets.REACT_APP_AZDEVOPS_ORGANIZATION }}" > .env
        echo "REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }}" >> .env
    
    - name: Build application
      run: npm run build
      env:
        REACT_APP_AZDEVOPS_ORGANIZATION: ${{ secrets.REACT_APP_AZDEVOPS_ORGANIZATION }}
        REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL }}
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: client-build
        path: client/build/
        retention-days: 1

  # Deploy infrastructure and application
  deploy:
    needs: build
    runs-on: ubuntu-latest
    # environment: ${{ github.event.inputs.environment || 'prod' }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: client-build
        path: client/build/
    
    - name: Azure Login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: Create Resource Group
      run: |
        az group create \
          --name ${{ env.AZURE_RESOURCE_GROUP }} \
          --location ${{ env.AZURE_LOCATION }} \
          --tags Environment=${{ github.event.inputs.environment || 'prod' }} Application=azdevops-dashboard
    
    - name: Deploy Infrastructure
      id: deploy-infra
      run: |
        set -e
        
        # Generate unique deployment name to avoid conflicts
        DEPLOYMENT_NAME="azdevops-dashboard-$(date +%s)"
        echo "🚀 Starting infrastructure deployment with name: $DEPLOYMENT_NAME"
        
        # Start deployment asynchronously to avoid stream consumption issues
        az deployment group create \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --template-file infra/main.bicep \
          --parameters environment=${{ github.event.inputs.environment || 'prod' }} \
          --parameters repositoryUrl="https://github.com/${{ github.repository }}" \
          --parameters repositoryToken="${{ secrets.GITHUB_TOKEN }}" \
          --name "$DEPLOYMENT_NAME" \
          --no-wait \
          --only-show-errors
        
        echo "✅ Deployment started successfully! Waiting for completion..."
        
        # Wait for deployment to complete and check status
        max_attempts=60  # 10 minutes max (60 * 10 seconds)
        attempt=0
        
        while [ $attempt -lt $max_attempts ]; do
          echo "⏳ Checking deployment status (attempt $((attempt + 1))/$max_attempts)..."
          
          deployment_state=$(az deployment group show \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name "$DEPLOYMENT_NAME" \
            --query 'properties.provisioningState' \
            --output tsv 2>/dev/null || echo "NotFound")
          
          echo "Current deployment state: $deployment_state"
          
          if [ "$deployment_state" = "Succeeded" ]; then
            echo "🎉 Deployment completed successfully!"
            break
          elif [ "$deployment_state" = "Failed" ] || [ "$deployment_state" = "Canceled" ]; then
            echo "❌ Deployment failed with state: $deployment_state"
            # Get error details
            az deployment group show \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --name "$DEPLOYMENT_NAME" \
              --query 'properties.error' \
              --output json || true
            exit 1
          elif [ "$deployment_state" = "NotFound" ]; then
            echo "⚠️ Deployment not found, retrying..."
          else
            echo "⏳ Deployment in progress (state: $deployment_state), waiting..."
          fi
          
          sleep 10
          attempt=$((attempt + 1))
        done
        
        if [ $attempt -eq $max_attempts ]; then
          echo "❌ Deployment timed out after 10 minutes"
          exit 1
        fi
        
        # Now get the outputs safely
        echo "📋 Retrieving deployment outputs..."
        deployment_output=$(az deployment group show \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name "$DEPLOYMENT_NAME" \
          --query 'properties.outputs' \
          --output json)
        
        echo "Raw deployment output: $deployment_output"
        
        # Validate output is not empty
        if [ -z "$deployment_output" ] || [ "$deployment_output" = "null" ]; then
          echo "❌ ERROR: Deployment output is empty or null. The deployment may have failed."
          exit 1
        fi
        
        # Extract outputs with error handling
        static_web_app_name=$(echo "$deployment_output" | jq -r '.staticWebAppName.value // "ERROR"')
        static_web_app_url=$(echo "$deployment_output" | jq -r '.staticWebAppUrl.value // "ERROR"')
        
        echo "Extracted static web app name: $static_web_app_name"
        echo "Extracted static web app URL: $static_web_app_url"
        
        if [ "$static_web_app_name" = "ERROR" ] || [ "$static_web_app_url" = "ERROR" ] || [ "$static_web_app_name" = "null" ] || [ "$static_web_app_url" = "null" ]; then
          echo "❌ ERROR: Failed to extract deployment outputs. Raw output: $deployment_output"
          exit 1
        fi
        
        # Set outputs for other steps
        echo "static-web-app-name=$static_web_app_name" >> $GITHUB_OUTPUT
        echo "static-web-app-url=https://$static_web_app_url" >> $GITHUB_OUTPUT
        
        # Create step summary
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** ${{ github.event.inputs.environment || 'prod' }}" >> $GITHUB_STEP_SUMMARY
        echo "**Static Web App:** $static_web_app_name" >> $GITHUB_STEP_SUMMARY
        echo "**URL:** https://$static_web_app_url" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ Infrastructure deployed successfully!" >> $GITHUB_STEP_SUMMARY
    
    - name: Deploy Static Web App
      id: deploy-static-web-app
      uses: Azure/static-web-apps-deploy@v1
      with:
        azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        action: "upload"
        app_location: "/client"
        output_location: "build"
        skip_app_build: true
    
    - name: Update deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "## ✅ Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🌐 **Live URL:** ${{ steps.deploy-infra.outputs.static-web-app-url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Visit your deployed application" >> $GITHUB_STEP_SUMMARY
          echo "2. Configure any custom domains if needed" >> $GITHUB_STEP_SUMMARY
          echo "3. Set up monitoring and alerts" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ❌ Deployment Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Please check the logs above for error details." >> $GITHUB_STEP_SUMMARY
        fi
    
    outputs:
      static-web-app-url: ${{ steps.deploy-infra.outputs.static-web-app-url }}
      static-web-app-name: ${{ steps.deploy-infra.outputs.static-web-app-name }}

  # Run smoke tests against the deployed application
  smoke-test:
    needs: deploy
    runs-on: ubuntu-latest
    if: success()
    
    defaults:
      run:
        working-directory: ./client
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: client/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
    
    - name: Run smoke tests against deployed app
      run: npx playwright test smoke.spec.ts
      env:
        BASE_URL: ${{ needs.deploy.outputs.static-web-app-url }}
        CI: true
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: smoke-test-results
        path: |
          client/playwright-report/
          client/test-results/
        retention-days: 30
